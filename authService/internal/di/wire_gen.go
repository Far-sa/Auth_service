// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"authentication-service/interfaces"
	"authentication-service/internal/app/handler"
	"authentication-service/internal/app/service"
	"authentication-service/internal/infrastructure/database"
	"authentication-service/internal/infrastructure/messaging"
	"authentication-service/internal/infrastructure/repository"
	"database/sql"
)

// Injectors from wire.go:

// InitializeAuthHandler initializes the AuthHandler with all dependencies.
func InitializeAuthHandler(jwtKey []byte) (*handler.AuthHandler, func(), error) {
	db, err := ProvideDatabase()
	if err != nil {
		return nil, nil, err
	}
	userRepository := ProvideUserRepository(db)
	rabbitMQConnection, cleanup, err := ProvideRabbitMQConnection()
	if err != nil {
		return nil, nil, err
	}
	eventPublisher := ProvideEventPublisher(rabbitMQConnection)
	authService := ProvideAuthService(userRepository, jwtKey, eventPublisher)
	authHandler := ProvideAuthHandler(authService)
	return authHandler, func() {
		cleanup()
	}, nil
}

// wire.go:

// ProvideDatabase returns a new instance of the database connection.
func ProvideDatabase() (*sql.DB, error) {
	return database.NewPostgresDB("postgres://user:password@localhost/authentication?sslmode=disable")
}

// ProvideRabbitMQConnection returns a new instance of the RabbitMQ connection.
func ProvideRabbitMQConnection() (*messaging.RabbitMQConnection, func(), error) {
	conn, err := messaging.NewRabbitMQConnection("amqp://guest:guest@localhost:5672/")
	cleanup := func() {
		conn.Close()
	}
	return conn, cleanup, err
}

// ProvideUserRepository returns a new instance of the user repository.
func ProvideUserRepository(db *sql.DB) interfaces.UserRepository {
	return repository.NewPostgresUserRepository(db)
}

// ProvideEventPublisher returns a new instance of the event publisher.
func ProvideEventPublisher(conn *messaging.RabbitMQConnection) interfaces.EventPublisher {
	return messaging.NewRabbitMQPublisher(conn)
}

// ProvideAuthService returns a new instance of the auth service.
func ProvideAuthService(repo interfaces.UserRepository, jwtKey []byte, publisher interfaces.EventPublisher) *service.AuthService {
	return service.NewAuthService(repo, jwtKey, publisher)
}

// ProvideAuthHandler returns a new instance of the auth handler.
func ProvideAuthHandler(service2 *service.AuthService) *handler.AuthHandler {
	return handler.NewAuthHandler(service2)
}
