version: "3.8"

networks:
  auth-network:
    driver: bridge
  authz-network:
    driver: bridge
  rabbitmq-network:
    driver: bridge

x-common-env: &common-env
  RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/

services:
  traefik:
    image: traefik:v2.4
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:8082"
    ports:
      - "8082:8082"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml"
      - "./traefik/dynamic.yml:/etc/traefik/dynamic.yml"
    labels:
    - "traefik.enable=true"
    - "traefik.http.middlewares.auth.forwardauth.address=http://auth-service:50053/"
    - "traefik.http.routers.api.rule=Host(`localhost`)"
    - "traefik.http.routers.api.service=api@internal"
    - "traefik.http.routers.dashboard.rule=Host(`localhost`) && PathPrefix(`/dashboard`)"
    - "traefik.http.routers.dashboard.service=api@internal"
    - "traefik.http.routers.dashboard.middlewares=auth"
    - "traefik.http.services.dashboard.loadbalancer.server.port=8082"

  auth-service:
    build:
      context: .
      dockerfile: authService/Dockerfile
    image: auth-svc-5.0.0
    #image: ${{ secrets.DOCKER_USERNAME }}/auth-service:latest
    container_name: auth-mofid
    ports:
      - "50051:50051"
    environment:
      <<: *common-env
      DATABASE_URL: postgres://postgres:password@postgres-auth:5432/auth_db
      #DATABASE_URL: postgres://${AUTH_SERVICE_DB_USER}:${AUTH_SERVICE_DB_PASSWORD}@postgres-auth:5432/${AUTH_SERVICE_DB_NAME}
      #RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
    depends_on:
      - postgres-auth
      - rabbitmq
    restart: always
    networks:
      - auth-network
      - rabbitmq-network
    volumes:
      - ./authorizeSvc/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql


  postgres-auth:
    image: postgres:13
    container_name: auth-db
    environment:
      POSTGRES_USER: postgres # ${POSTGRES_USER}
      POSTGRES_PASSWORD: password # ${POSTGRES_PASSWORD}
      # POSTGRES_DB: ${AUTH_SERVICE_DB_NAME}
      # POSTGRES_DB: ${POSTGRES_DB}
      # NEW_ROLE: ${AUTH_SERVICE_DB_USER}
      # NEW_ROLE_PASSWORD: ${AUTH_SERVICE_DB_PASSWORD}
    ports:
      - "5432:5432" #? Map to a different port on the host
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./data/authDB/postgres_data:/var/lib/postgresql/data
      # - ./authService/scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      # - ./.env:/docker-entrypoint-initdb.d/.env
    networks:
      - auth-network

  #! test DB
  # postgres:
  #   image: postgres:12-alpine
  #   container_name: postgres12
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: password
  #     # POSTGRES_DB: ${AUTH_SERVICE_DB_NAME}
  #     # POSTGRES_DB: user_db
  #     # NEW_ROLE: ${AUTH_SERVICE_DB_USER}
  #     # NEW_ROLE_PASSWORD: ${AUTH_SERVICE_DB_PASSWORD}
  #   ports:
  #     - "5432:5432" #? Map to a different port on the host
  #   # healthcheck:
  #   #   test: ["CMD", "pg_isready", "-U", "postgres"]
  #   #   interval: 10s
  #   #   timeout: 5s
  #   #   retries: 5
  #   volumes:
  #     - ./data/postgres12/postgres_data:/var/lib/postgresql/data
  #     - ./authorizeSvc/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    # volumes:
    #   - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    #   - ./config/definitions.json:/etc/rabbitmq/definitions.json
    # networks:
    #   - rabbitmq-network

  # authz-service:
  #   build:
  #     context: ./authorizeSvc
  #     dockerfile: Dockerfile
  #   image: authz-svc-5.0.0
  #   #image: ${{ secrets.DOCKER_USERNAME }}/auth-service:latest
  #   container_name: authz-mofid
  #   ports:
  #     - "50052:50052"
  #   environment:
  #     <<: *common-env
  #     DATABASE_URL: postgres://${AUTHZ_SERVICE_DB_USER}:${AUTHZ_SERVICE_DB_PASSWORD}@postgres-authz:5432/${AUTHZ_SERVICE_DB_NAME}
  #     # RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
  #   depends_on:
  #     - postgres-authz
  #     - rabbitmq
  #   restart: always
  #   networks:
  #     - authz-network
  #     - rabbitmq-network
  #   volumes:
  #     - ./.env:/app/.env
  #     - ./authorizeSvc/scripts:/docker-entrypoint-initdb.d  # Mount scripts folder for authz-service

  
  # postgres-authz:
  #   image: postgres:13
  #   container_name: authz-db
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     # POSTGRES_DB: ${AUTHZ_SERVICE_DB_NAME}
  #     # POSTGRES_DB: ${POSTGRES_DB}
  #     # NEW_ROLE: ${AUTHZ_SERVICE_DB_USER}
  #     # NEW_ROLE_PASSWORD: ${AUTHZ_SERVICE_DB_PASSWORD}
  #   ports:
  #     - "5434:5432" #? Map to a different port on the host
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - authz-network
  #   volumes:
  #     - ./data/authzDB/postgres_data:/var/lib/postgresql/data
  #   #   - ./authorizeSvc/scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
  #     # - ./.env:/docker-entrypoint-initdb.d/.env
# networks:
#   auth-network:
#     external: true
#   authz-network:
#     external: true
#   rabbitmq-network:
#     external: true

#!
# version: '3.8'

# networks:
#   ecomm_network:
#     driver: bridge

# services:
#   rabbitmq:
#     image: rabbitmq:3-management
#     ports:
#       - "5672:5672"
#       - "15672:15672"
#     volumes:
#       - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
#       - ./config/definitions.json:/etc/rabbitmq/definitions.json
#     environment:
#       RABBITMQ_DEFAULT_USER: guest
#       RABBITMQ_DEFAULT_PASS: guest

#   postgres-authentication:
#     image: postgres:13
#     environment:
#       POSTGRES_USER: auth_user
#       POSTGRES_PASSWORD: auth_password
#       POSTGRES_DB: auth_db
#     ports:
#       - "5432:5432"
#     volumes:
#       - pgdata-authentication:/var/lib/postgresql/data
#     networks:
#       - ecomm_network

#   postgres-authorization:
#     image: postgres:13
#     environment:
#       POSTGRES_USER: authz_user
#       POSTGRES_PASSWORD: authz_password
#       POSTGRES_DB: authz_db
#     ports:
#       - "5433:5432"
#     volumes:
#       - pgdata-authorization:/var/lib/postgresql/data
#     networks:
#       - ecomm_network

#   postgres-product-catalog:
#     image: postgres:13
#     environment:
#       POSTGRES_USER: product_user
#       POSTGRES_PASSWORD: product_password
#       POSTGRES_DB: product_db
#     ports:
#       - "5434:5432"
#     volumes:
#       - pgdata-product-catalog:/var/lib/postgresql/data
#     networks:
#       - ecomm_network

#   postgres-cart:
#     image: postgres:13
#     environment:
#       POSTGRES_USER: cart_user
#       POSTGRES_PASSWORD: cart_password
#       POSTGRES_DB: cart_db
#     ports:
#       - "5435:5432"
#     volumes:
#       - pgdata-cart:/var/lib/postgresql/data
#     networks:
#       - ecomm_network

#   postgres-order:
#     image: postgres:13
#     environment:
#       POSTGRES_USER: order_user
#       POSTGRES_PASSWORD: order_password
#       POSTGRES_DB: order_db
#     ports:
#       - "5436:5432"
#     volumes:
#       - pgdata-order:/var/lib/postgresql/data
#     networks:
#       - ecomm_network

#   postgres-payment:
#     image: postgres:13
#     environment:
#       POSTGRES_USER: payment_user
#       POSTGRES_PASSWORD: payment_password
#       POSTGRES_DB: payment_db
#     ports:
#       - "5437:5432"
#     volumes:
#       - pgdata-payment:/var/lib/postgresql/data
#     networks:
#       - ecomm_network

#   postgres-user:
#     image: postgres:13
#     environment:
#       POSTGRES_USER: user_user
#       POSTGRES_PASSWORD: user_password
#       POSTGRES_DB: user_db
#     ports:
#       - "5438:5432"
#     volumes:
#       - pgdata-user:/var/lib/postgresql/data
#     networks:
#       - ecomm_network

#   postgres-inventory:
#     image: postgres:13
#     environment:
#       POSTGRES_USER: inventory_user
#       POSTGRES_PASSWORD: inventory_password
#       POSTGRES_DB: inventory_db
#     ports:
#       - "5439:5432"
#     volumes:
#       - pgdata-inventory:/var/lib/postgresql/data
#     networks:
#       - ecomm_network

#   authentication-service:
#     build:
#       context: ./authentication-service
#       dockerfile: Dockerfile
#     environment:
#       DATABASE_URL: postgres://auth_user:auth_password@postgres-authentication:5432/auth_db?sslmode=disable
#       RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
#     depends_on:
#       - postgres-authentication
#       - rabbitmq
#     ports:
#       - "50051:50051"
#     networks:
#       - ecomm_network

#   authorization-service:
#     build:
#       context: ./authorization-service
#       dockerfile: Dockerfile
#     environment:
#       DATABASE_URL: postgres://authz_user:authz_password@postgres-authorization:5432/authz_db?sslmode=disable
#       RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
#     depends_on:
#       - postgres-authorization
#       - rabbitmq
#     ports:
#       - "50052:50052"
#     networks:
#       - ecomm_network

#   product-catalog-service:
#     build:
#       context: ./product-catalog-service
#       dockerfile: Dockerfile
#     environment:
#       DATABASE_URL: postgres://product_user:product_password@postgres-product-catalog:5432/product_db?sslmode=disable
#       RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
#     depends_on:
#       - postgres-product-catalog
#       - rabbitmq
#     ports:
#       - "50053:50053"
#     networks:
#       - ecomm_network

#   cart-service:
#     build:
#       context: ./cart-service
#       dockerfile: Dockerfile
#     environment:
#       DATABASE_URL: postgres://cart_user:cart_password@postgres-cart:5432/cart_db?sslmode=disable
#       RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
#     depends_on:
#       - postgres-cart
#       - rabbitmq
#     ports:
#       - "50054:50054"
#     networks:
#       - ecomm_network

#   order-service:
#     build:
#       context: ./order-service
#       dockerfile: Dockerfile
#     environment:
#       DATABASE_URL: postgres://order_user:order_password@postgres-order:5432/order_db?sslmode=disable
#       RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
#     depends_on:
#       - postgres-order
#       - rabbitmq
#     ports:
#       - "50055:50055"
#     networks:
#       - ecomm_network

#   payment-service:
#     build:
#       context: ./payment-service
#       dockerfile: Dockerfile
#     environment:
#       DATABASE_URL: postgres://payment_user:payment_password@postgres-payment:5432/payment_db?sslmode=disable
#       RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
#     depends_on:
#       - postgres-payment
#       - rabbitmq
#     ports:
#       - "50056:50056"
#     networks:
#       - ecomm_network

#   user-service:
#     build:
#       context: ./user-service
#       dockerfile: Dockerfile
#     environment:
#       DATABASE_URL: postgres://user_user:user_password@postgres-user:5432/user_db?sslmode=disable
#       RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
#     depends_on:
#       - postgres-user
#       - rabbitmq
#     ports:
#       - "50057:50057"
#     networks:
#       - ecomm_network

#   inventory-service:
#     build:
#       context: ./inventory-service
#       dockerfile: Dockerfile
#     environment:
#       DATABASE_URL: postgres://inventory_user:inventory_password@postgres-inventory:5432/inventory_db?sslmode=disable
#       RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
#     depends_on:
#       - postgres-inventory
#       - rabbitmq
#     ports:
#       - "50058:50058"
#     networks:
#       - ecomm_network

# volumes:
#   pgdata-authentication:
#   pgdata-authorization:
#   pgdata-product-catalog:
#   pgdata-cart:
#   pgdata-order:
#   pgdata-payment:
#   pgdata-user:
#   pgdata-inventory:
